/* syntax:
[
    {
        `type` is "exact match" or "regex match"
        `confidence` indicates subjective estimation of negative side-effects. valid values: "required", "recommended", "experimental".
        `command` is the command you want to verify the output of. should not contain sudo.
        `sudo_command` a version of the command that requires elevated privileges should the `command` version fail to pass.
        `expected_stdout` is the stdout string to match if type is "exact match"
        `expected_regex` is the regex to match against stdout if type is "regex match"
        `fix` is the command to run if stdout does not match expected result. should not contain sudo.
        `sudo_fix` is the command to run if stdout does not match expected result and `fix` does not resolve the failure.
        `case_sensitive` is "true" or "false"
        `description` is a human-readable string describing the configuration being checked
    }
]
/* samples:
[
    {
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read /Library/Preferences/com.apple.alf globalstate"
        expected_stdout: "1"
        fix: "defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
        case_sensitive: "false"
        description: "The OSX application firewall is enabled."
    },
    {
        type: "regex match"
        confidence: "required"
        command: "pmset -g"
        expected_regex: ".*DestroyFVKeyOnStandby\\s+1.*"
        fix: "pmset -a destroyfvkeyonstandby 1"
        sudo_fix: "sudo pmset -a destroyfvkeyonstandby 1"
        case_sensitive: "false"
        description: "The File Vault key is destroyed when going to standby mode."
    }
]
*/
/* NOTES:
    * back-slashes '\' must be escaped with a double black-slash, i.e. '\\'
*/
[
    /* --- BEGIN SYSTEM SETTINGS --- */
    {
        //Check if the System Preferences app is closed -- otherwise, it may override changes this app makes.
        type: "exact match"
        confidence: "required"
        command: "ps ax | grep -c '/Applications/System Preferences.app/Contents/MacOS/System Preferences'"
        expected_stdout: "2" //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
        fix:
            killall "System Preferences" ; sleep 1
        case_sensitive: "false"
        description: "The System Preferences application is currently closed."
        reference: "https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html"
    },
    {
        type: "exact match"
        confidence: "required"
        command: "id -Gn | grep -c -w admin"
        expected_stdout: "0"
        fix: "# NO FIX AVAILABLE, you must create a new account in System Preferences"
        case_sensitive: "false"
        description: "Current user is a non-admin account. (Create a new account if this fails!)"
    },
    {
        //System Preferences->Security & Privacy->Firewall->Turn On Firewall
        //Note: This seems to get overwritten logging out/in. See following, user-specific version.
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read /Library/Preferences/com.apple.alf globalstate"
        expected_stdout: "1"
        fix: "defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
        sudo_fix: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
        case_sensitive: "false"
        description: "The OSX application firewall is enabled (system-wide)."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
    },
    {
        //System Preferences->Security & Privacy->Firewall->Turn On Firewall
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.alf globalstate"
        expected_stdout: "1"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.alf globalstate -bool true"
        sudo_fix: "sudo defaults -currentHost write ~/Library/Preferences/com.apple.alf globalstate -bool true"
        case_sensitive: "false"
        description: "The OSX application firewall is enabled (current user only)."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
    },
    {

        type: "exact match"
        confidence: "required"
        command: "defaults read /Library/Preferences/com.apple.screensaver askForPassword"
        command: "sudo defaults read /Library/Preferences/com.apple.screensaver askForPassword"
        expected_stdout: "1"
        fix: "defaults write /Library/Preferences/com.apple.screensaver askForPassword -bool true"
        sudo_fix: "sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -bool true"
        case_sensitive: "false"
        description: "A password is required to wake the computer from sleep or screen saver (system-wide)."
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    {
        type: "exact match"
        confidence: "required"
        command: "defaults read ~/Library/Preferences/com.apple.screensaver askForPassword"
        expected_stdout: "1"
        fix: "defaults write ~/Library/Preferences/com.apple.screensaver askForPassword -bool true"
        case_sensitive: "false"
        description: "A password is required to wake the computer from sleep or screen saver (current user only)."
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    {
        //System Preferences->Security & Privacy->General->Require password [time interval]
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read /Library/Preferences/com.apple.screensaver askForPasswordDelay"
        sudo_command: "sudo defaults -currentHost read /Library/Preferences/com.apple.screensaver askForPasswordDelay"
        expected_stdout: "0"
        fix: "defaults -currentHost write /Library/Preferences/com.apple.screensaver askForPasswordDelay -bool false"
        sudo_fix: "sudo defaults -currentHost write /Library/Preferences/com.apple.screensaver askForPasswordDelay -bool false"
        case_sensitive: "false"
        description: "There is no delay between starting the screen saver and locking the machine (system-wide)."
        undo: "defaults -currentHost write /Library/Preferences/com.apple.screensaver askForPasswordDelay -bool true"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    {
        //System Preferences->Security & Privacy->General->Require password [time interval]
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.screensaver askForPasswordDelay"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.screensaver askForPasswordDelay -bool false"
        case_sensitive: "false"
        description: "There is no delay between starting the screen saver and locking the machine (current user only)."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.screensaver askForPasswordDelay -bool true"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    {

        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read /Library/Preferences/com.apple.alf loggingenabled"
        expected_stdout: "1"
        fix: "defaults -currentHost write /Library/Preferences/com.apple.alf loggingenabled -bool true"
        sudo_fix: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf loggingenabled -bool true"
        case_sensitive: "false"
        description: "Logging is enabled for the operating system."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
    },
    {
        type: "exact match"
        confidence: "required"
        //test based on: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils/analytics.sh
        command: "[[ -n $HOMEBREW_NO_ANALYTICS ]] && echo 1 || echo 0"
        expected_stdout: "1"
        //TODO: This fix works if you login/logout, but I haven't been able to get a fix working that doesn't require login/logout. The enironment variable is context dependent, and it's not clear how to set the variable in the parent-most environment without this action.
        fix: "grep -q 'export HOMEBREW_NO_ANALYTICS=1' ~/.profile || echo 'export HOMEBREW_NO_ANALYTICS=1' >> ~/.profile ; source ~/.profile"
        case_sensitive: "false"
        description: "Homebrew analytics are disabled. (NOTE: Fix requires you to login/logout.)"
        reference: "https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Analytics.md"
    },
    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Enable Stealth Mode
        //Note: This seems to get overwritten logging out/in. See following, user-specific version.
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read /Library/Preferences/com.apple.alf stealthenabled"
        expected_stdout: "1"
        fix: "defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
        sudo_fix: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
        case_sensitive: "false"
        description: "Stealth mode is enabled for OSX: Computer does not respond to ICMP ping requests or connection attempts from a closed TCP/UDP port. (system-wide)"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        undo: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool false"
    },
    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Enable Stealth Mode
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.alf stealthenabled"
        expected_stdout: "1"
        fix: "defaults write ~/Library/Preferences/com.apple.alf stealthenabled -bool true"
        sudo_fix: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
        case_sensitive: "false"
        description: "Stealth mode is enabled for OSX: Computer does not respond to ICMP ping requests or connection attempts from a closed TCP/UDP port. (current user only)"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        undo: "defaults write ~/Library/Preferences/com.apple.alf stealthenabled -bool false"
    },
    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Automatically allow signed software to receive incoming connections
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read /Library/Preferences/com.apple.alf allowsignedenabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool false"
        sudo_fix: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool false"
        case_sensitive: "false"
        description: "Automatic whitelisting of Apple-signed applications for firewall is disabled (system-wide)."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        undo: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool true"
    },
    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Automatically allow signed software to receive incoming connections
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.alf allowsignedenabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.alf allowsignedenabled -bool false"
        case_sensitive: "false"
        description: "Automatic whitelisting of Apple-signed applications for firewall is disabled (current user only)."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        undo: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool true"
    },
    {
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read /Library/Preferences/SystemConfiguration/com.apple.captive.control Active"
        expected_stdout: "0"
        fix: "defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.captive.control Active -bool false"
        sudo_fix: "sudo defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.captive.control Active -bool false"
        case_sensitive: "false"
        description: "Captive portal for connecting to new networks is disabled to prevent MITM attacks."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        undo: "sudo defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.captive.control Active -bool true"
    },
    {
        type: "exact match"
        confidence: "required"
        command: "openssl version"
        expected_stdout: "OpenSSL 1.0.2h  3 May 2016"
        fix: "brew update ; brew install openssl ; brew upgrade openssl ; brew link openssl --force ; mv /usr/bin/openssl /usr/in/openssl-apple"
        sudo_fix: "brew update ; brew install openssl ; brew upgrade openssl ; brew link openssl --force ; sudo mv /usr/bin/openssl /usr/in/openssl-apple"
        case_sensitive: "false"
        description: "OpenSSL is up-to-date."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        undo: "sudo mv /usr/bin/openssl-apple /usr/bin/openssl ; brew unlink openssl"
    },
    {
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read /Library/Preferences/SystemConfiguration/com.apple.finder AppleShowAllFiles"
        expected_stdout: "1"
        fix: "defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.finder AppleShowAllFiles -bool true && killall Dock"
        sudo_fix: "sudo defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.finder AppleShowAllFiles -bool true && killall Dock"
        case_sensitive: "false"
        description: "Hidden files are displayed in Finder."
        reference: "http://lifehacker.com/the-best-hidden-settings-you-can-unlock-with-os-xs-ter-1476627111"
        undo: "defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.finder AppleShowAllFiles -bool false && killall Dock"
    },
    {
        type: "exact match"
        confidence: "required"
        command:
            LASTUPDATE=$(defaults read /Library/Preferences/com.apple.SoftwareUpdate | grep LastSuccessfulDate | sed -e 's@^.* "\([0-9\\-]*\) .*$@\1@'); if [ "$LASTUPDATE" = "$(date +%Y-%m-%d)" ];then echo 1 && exit; fi; exit 0 && exit
        expected_stdout: "1"
        fix: "softwareupdate -i -a"
        sudo_fix: "sudo softwareupdate -i -a"
        case_sensitive: "false"
        description: "All application software is currently up to date."
        reference: "https://github.com/SummitRoute/osxlockdown/"
    },
    {
        //System Preferences: App Store: Automatically check for updates
        type: "exact match"
        confidence: "required"
        command: "softwareupdate --schedule | grep 'Automatic check is on'"
        sudo_command: "sudo softwareupdate --schedule | grep 'Automatic check is on'"
        expected_stdout: "Automatic check is on"
        fix: "softwareupdate --schedule on"
        sudo_fix: "sudo softwareupdate --schedule on"
        case_sensitive: "false"
        description: "Automatic check for software updates is enabled."
        reference: "https://github.com/SummitRoute/osxlockdown/"
    },
    {
        //System Preferences->Security & Privacy->General->Allow apps downloaded from
        type: "exact match"
        confidence: "required"
        command: "spctl --status | grep 'assessments enabled'"
        expected_stdout: "assessments enabled"
        fix: "spctl --master-enable"
        sudo_fix: "sudo spctl --master-enable"
        case_sensitive: "false"
        description: "GateKeeper protection against untrusted applications is enabled."
        undo: "sudo spctl --master-disable"
    },
    {
        //System Preferences->Bluetooth->Turn Bluetooth Off
        type: "exact match"
        confidence: "experimental"
        command: "defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState"
        sudo_command: "sudo defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState"
        expected_stdout: "0"
        fix: "defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool false; killall -HUP blued"
        sudo_fix: "sudo defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool false; sudo killall -HUP blued"
        case_sensitive: "false"
        description: "Bluetooth is disabled."
        undo: "defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool true; killall -HUP blued"
    },
    {
        type: "exact match"
        confidence: "required"
        command: "defaults read /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled"
        sudo_command: "sudo defaults read /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled"
        expected_stdout: "0"
        fix: "defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool false"
        sudo_fix: "sudo defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool false"
        case_sensitive: "false"
        description: "The infrared receiver is disabled."
        undo: "defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool true"
    },
    {
        type: "exact match"
        confidence: "required"
        command: "defaults read com.apple.NetworkBrowser DisableAirDrop"
        sudo_command: "sudo defaults read com.apple.NetworkBrowser DisableAirDrop"
        expected_stdout: "1"
        fix: "defaults write /Library/Preferences/com.apple.NetworkBrowser DisableAirDrop -bool true"
        sudo_fix: "sudo defaults write /Library/Preferences/com.apple.NetworkBrowser DisableAirDrop -bool true"
        case_sensitive: "false"
        description: "AirDrop file sharing is disabled."
        undo: "defaults write /Library/Preferences/com.apple.NetworkBrowser DisableAirDrop -bool false"
    },

        /* Begin: System Preferences->Sharing */
    {
        //System Preferences->Sharing->File Sharing
        type: "exact match"
        confidence: "recommended"
        command:
            if [ -n "$(launchctl list | egrep AppleFileServer)" ]; then exit 1; fi; if [ -n "$(grep -i array /Library/Preferences/SystemConfiguration/com.apple.smb.server.plist)" ]; then echo 1; exit; fi; echo 0; exit
        expected_stdout: "0"
        fix: "launchctl unload -w /System/Library/LaunchDaemons/com.apple.AppleFileServer.plist; launchctl unload -w /System/Library/LaunchDaemons/com.apple.smbd.plist"
        case_sensitive: "false"
        description: "File sharing is disabled."
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    {
        //System Preferences->Sharing->Printer Sharing
        type: "exact match"
        confidence: "required"
        command:
            if [ -n "$(system_profiler SPPrintersDataType | grep Shared | grep Yes)" ]; then echo 1; exit; fi; if [ -n "$(system_profiler SPPrintersDataType | grep 'System Printer Sharing: Yes')" ]; then echo 1; exit; fi; echo 0; exit
        expected_stdout: "0"
        fix: "cupsctl --no-share-printers"
        case_sensitive: "false"
        description: "Printer sharing is disabled."
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    {
        //System Preferences->Sharing->Remote Login
        type: "exact match"
        confidence: "required"
        command: "systemsetup -getremotelogin"
        sudo_command: "sudo systemsetup -getremotelogin"
        expected_stdout: "Remote Login: Off"
        fix: "systemsetup -f -setremotelogin off"
        sudo_fix: "sudo systemsetup -f -setremotelogin off"
        case_sensitive: "false"
        description: "Remote login is disabled."
        undo: "sudo systemsetup -f -setremotelogin on"
    },
    {
        //System Preferences->Sharing->Remote Management
        type: "exact match"
        confidence: "required"
        command:
            if [ -n "$(ps -ef | egrep "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/[A]RDAgent")" ]; then echo 1; exit; fi; echo 0; exit
        expected_stdout: "0"
        fix: "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop"
        sudo_fix: "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop"
        case_sensitive: "false"
        description: "Remote Management is disabled."
    },
    {
        //System Preferences->Sharing->Remote Apple Events
        //See: https://support.apple.com/kb/PH18721?locale=en_US
        type: "exact match"
        confidence: "required"
        command: "systemsetup -getremoteappleevents"
        sudo_command: "sudo systemsetup -getremoteappleevents"
        expected_stdout: "Remote Apple Events: Off"
        fix: "systemsetup -setremoteappleevents off"
        sudo_fix: "systemsetup -setremoteappleevents off"
        case_sensitive: "false"
        description: "Remote Apple events are disabled."
        undo: "sudo systemsetup -setremoteappleevents on"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    {
        //System Preferences->Sharing->Internet Sharing
        type: "exact match"
        confidence: "required"
        command: "defaults read /Library/Preferences/SystemConfiguration/com.apple.nat NAT | grep -c 'Enabled = 1'"
        expected_stdout: "0"
        fix: "defaults write /Library/Preferences/SystemConfiguration/com.apple.nat NAT -dict-add Enabled -bool false"
        sudo_fix: "sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.nat NAT -dict-add Enabled -bool false"
        case_sensitive: "false"
        description: "Internet Sharing is disabled on all network interfaces."
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
        /* End: System Preferences->Sharing */
    {
        //System Preferences->Energy Saver->Wake for network access
        type: "exact match"
        confidence: "required"
        command: "systemsetup getwakeonnetworkaccess"
        sudo_command: "sudo systemsetup getwakeonnetworkaccess"
        expected_stdout: "Wake On Network Access: Off"
        fix: "systemsetup -setwakeonnetworkaccess off"
        sudo_fix: "sudo systemsetup -setwakeonnetworkaccess off"
        case_sensitive: "false"
        description: "Wake on Network Access feature is disabled."
        undo: "sudo systemsetup -setwakeonnetworkaccess on"
    },
    {
        //Disables NTPd. There are definitely some downsides to this; some security software requires synchronized clocks, so this increases the risk of getting out of sync. I think most of this software will fail-safe, though. Disabling this has various benefits. See discussion here: https://github.com/SummitRoute/osxlockdown/issues/18
        type: "exact match"
        confidence: "recommended"
        command: "systemsetup getusingnetworktime"
        sudo_command: "sudo systemsetup getusingnetworktime"
        expected_stdout: "Network Time: Off"
        fix: "systemsetup setusingnetworktime off"
        sudo_fix: "sudo systemsetup setusingnetworktime off"
        case_sensitive: "false"
        description: "Automatic setting of time and date is disabled."
        undo: "sudo systemsetup setusingnetworktime on"
    },
    {
        //There are a number of attacks based on IPv6 use. For the sake of simplicity, it's best to disable it entirely unless it is requried. See: https://www.ernw.de/download/ERNW_Hardening_IPv6_MacOS-X_v1_0.pdf
        type: "exact match"
        confidence: "recommended"
        command:
            networksetup -listallnetworkservices | while read i; do SUPPORT=$(networksetup -getinfo "$i" | grep "IPv6: Automatic") && if [ -n "$SUPPORT" ]; then echo 1; fi; done; echo 0; exit
        expected_stdout: "0"
        fix:
            networksetup -listallnetworkservices | while read i; do SUPPORT=$(networksetup -getinfo "$i" | grep "IPv6: Automatic") && if [ -n "$SUPPORT" ]; then networksetup -setv6off "$i"; fi; done;
        case_sensitive: "false"
        description: "IPv6 is disabled on all network interfaces."
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    {
        type: "exact match"
        confidence: "required"
        command:
            if [ -n "$(security authorizationdb read system.preferences 2> /dev/null | grep -A1 shared | grep -E '(true|false)' | grep 'false')" ]; then echo 0; else echo 1; fi
        expected_stdout: "0"
        fix:
            security authorizationdb read system.preferences > /tmp/system.preferences.plist &&/usr/libexec/PlistBuddy -c "Set :shared false" /tmp/system.preferences.plist && security authorizationdb write system.preferences < /tmp/system.preferences.plist
        case_sensitive: "false"
        description: "An administrator password is required to change system-wide preferences."
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        //TODO: Add warning to user before fix command is run that she will be prompted for her admin credentials.
    },
    {
        type: "exact match"
        confidence: "required"
        command: "defaults read NSGlobalDomain NSDocumentSaveNewDocumentsToCloud"
        expected_stdout: "0"
        fix: "defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false"
        case_sensitive: "false"
        description: "Documents are not stored to iCloud Drive by default. (May be mistaken if iCloud is disabled)"
        reference: "http://mjtsai.com/blog/2014/10/26/yosemite-uploads-unsaved-documents-and-recent-addresses-to-icloud/"
        undo: "defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool true"
    },
    {
        type: "regex match"
        confidence: "recommended"
        command: "pmset -g"
        expected_regex: ".*destroyfvkeyonstandby\\s+1.*"
        fix: "pmset -a destroyfvkeyonstandby 1"
        sudo_fix: "sudo pmset -a destroyfvkeyonstandby 1"
        case_sensitive: "false"
        description: "The File Vault key is destroyed when going to standby mode."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
    },
    {
        type: "regex match"
        confidence: "recommended"
        command: "pmset -g"
        expected_regex: ".*hibernatemode\\s+25.*"
        fix: "pmset -a hibernatemode 25"
        sudo_fix: "sudo pmset -a hibernatemode 25"
        case_sensitive: "false"
        description: "The system will store a copy of memory to persistent storage, and will remove power to memory."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
    },
    {
        type: "regex match"
        confidence: "required"
        command: "git --version"
        expected_regex: ".*(command not found|2\\.8\\.2).*"
        //This will make sure latest git is installed via homebrew and make make apple's version of git non-competitive
        fix: "brew update && brew install git && brew upgrade git && mv /usr/bin/git /usr/bin/git-apple"
        sudo_fix: "brew update && brew install git && brew upgrade git && sudo mv /usr/bin/git /usr/bin/git-apple"
        case_sensitive: "false"
        description: "git is up to date or is not installed"
    },
    {
        type: "regex match"
        confidence: "recommended"
        command: "launchctl list"
        sudo_command: "sudo launchctl list"
        expected_regex: "^((?!com\\.apple\\.apsd).)*$"
        fix: "launchctl unload -w /System/Library/LaunchDaemons/com.apple.apsd.plist"
        sudo_fix: "sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.apsd.plist"
        case_sensitive: "false"
        description: "Apple Push Notifications are disabled."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        undo: "sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.apsd.plist"
    },
    {
        type: "regex match"
        confidence: "recommended"
        command: "networksetup listallnetworkservices | grep -v 'An asterisk' | xargs -I{} networksetup -getdnsservers '{}' "
        expected_regex: "^(8\\.8\\.8\\.8\\n8\\.8\\.4\\.4\n*)+$"
        fix: "networksetup listallnetworkservices | grep -v 'An asterisk' | xargs -I{} networksetup -setdnsservers '{}' 8.8.8.8 8.8.4.4"
        case_sensitive: "false"
        description: "Google DNS servers are used by default on all network interfaces."
    },
    {
        type: "regex match"
        confidence: "required"
        command: "curl --version"
        expected_regex: ".*(command not found|7\\.48\\.0).*"
        fix: "brew update ; brew install curl ; brew upgrade curl ; brew link curl --force"
        case_sensitive: "false"
        description: "The curl utility is up to date or absent from the system."
        undo: "brew unlink curl"
    },
    {
        type: "regex match"
        confidence: "required"
        command: "fdesetup status -verbose"
        expected_regex: "^.*FileVault is On.*$"
        /*
         * I'm disabling the fixes below for now, because the decryption key
         * that the user should back up is printed to STDOUT. See:
         * https://derflounder.wordpress.com/2013/10/22/managing-mavericks-filevault-2-with-fdesetup/
         * https://github.com/SummitRoute/osxlockdown/blob/master/commands.yaml
         */
        fix: "#"
        //fix: "fdesetup enable"
        //sudo_fix: "sudo fdesetup enable"
        case_sensitive: "false"
        description: "FileVault file system encryption is enabled."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        undo: ""
    },
    {
        type: "regex match"
        confidence: "required"
        command: "fdesetup status -verbose"
        expected_regex: "^.*device path \\=\\s+.*$"
        fix: "#TODO: None"
        case_sensitive: "false"
        description: "FileVault file system encrption is enabled at the root directory."
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
    },
    {
        //System Preferences->Desktop & Screen Saver->Start after
        type: "regex match"
        confidence: "recommended"
        //This is a clever way for polling settings for multiple users from the current logged in user :-)
        command:
            UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then TIMEOUT=$(defaults read $PREF.plist idleTime) && if [ $TIMEOUT -eq 0 ] || [ $TIMEOUT -gt 600 ]; then echo 1; fi; else echo 0; fi; done;
        expected_regex: "^(0\n*)+$" //all zeroes
        fix:
            UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then defaults -currentHost write $PREF.plist idleTime -int 600; fi; done
        case_sensitive: "false"
        description: "The idle timer for screen saver activation is set to 10 minutes or less."
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
    },
    /* ---- END SYSTEM SETTINGS ---- */

    /* ---BEGIN SAFARI BROWSER SETTINGS--- */
    {
        //Check if the Safari app is closed -- otherwise, it may override changes this app makes.
        type: "exact match"
        confidence: "required"
        command: "ps ax | grep -c '/Applications/Safari.app/Contents/MacOS/Safari'"
        expected_stdout: "2" //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
        fix:
            killall "Safari" ; sleep 1
        case_sensitive: "false"
        description: "The Safari application is currently closed."
        reference: "https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html"
    },
    {
        //Safari->Preferences->AutoFill->Credit cards
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillCreditCardData"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillCreditCardData -bool false"
        case_sensitive: "false"
        description: "Safari will not auto-fill credit card data."
    },
    {
        //Safari->Preferences->AutoFill->Using info from my Contacts card
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillFromAddressBook"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillFromAddressBook -bool false"
        case_sensitive: "false"
        description: "Safari will not auto-fill your contact data."
    },
    {
        //Safari->Preferences->AutoFill->Other forms
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillMiscellaneousForms"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillMiscellaneousForms -bool false"
        case_sensitive: "false"
        description: "Safari will not auto-fill miscellaneous forms."
    },
    {
        //Safari->Preferences->AutoFill->User names and passwords
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillPasswords"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillPasswords -bool false"
        case_sensitive: "false"
        description: "Safari will not auto-fill usernames or passwords."
    },
    {
        //Safari->Preferences->General->Open "safe" files after downloading
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads -bool false"
        case_sensitive: "false"
        description: "Files downloaded in Safari are not automatically opened."
    },
    {
        //Safari->Preferences->Privacy->Cookies and website data->Always block
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari BlockStoragePolicy"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari BlockStoragePolicy -bool false"
        case_sensitive: "false"
        description: "Cookies and local storage are always blocked in Safari."
    },
    {
        //Safari->Develop->Disable Extensions
        //Note: Extensions are often a persistence mechanism for browser-based malware.
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari ExtensionsEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari ExtensionsEnabled -bool false"
        case_sensitive: "false"
        description: "Safari extensions are disabled."
    },
    {
        //Safari->Preferences->Security->Fraudulent sites->Warn when visiting a fraudulent website
        type: "exact match"
        //I'm setting this to recommended for on the basis that there is like a privacy trade-off
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites"
        expected_stdout: "1"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites -bool true"
        case_sensitive: "false"
        description: "The Safari web browser will warn when vistiting known fraudulent websites."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites -bool false"
    },
    {
        //Safari->Preferences->Security->Web Content->Enable JavaScript
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool false"
        case_sensitive: "false"
        description: "JavaScript disabled in the Safari web browser."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool true"
    },
    {
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WebKitJavaScriptEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitJavaScriptEnabled -bool false"
        case_sensitive: "false"
        description: "JavaScript disabled in the Safari web browser (Legacy version)."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitJavaScriptEnabled -bool true"
    },
    {
        //Safari->Preferences->Security->Web Content->Block pop-up windows
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false"
        case_sensitive: "false"
        description: "Pop-up windows are blocked in the Safari web browser."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool true"
    },
    {
        //Safari->Preferences->Security->Web Content->Block pop-up windows
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false"
        case_sensitive: "false"
        description: "Pop-up windows are blocked in the Safari web browser (Legacy version)."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool true"
    },
    {
        //Safari->Preferences->Security->Web Content->Allow WebGL
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2WebGLEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2WebGLEnabled -bool false"
        case_sensitive: "false"
        description: "The WebGL plug-in is disabled in the Safari web browser."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2WebGLEnabled -bool true"
    },
    {
        //Safari->Preferences->Security->Internet plug-ins->Allow Plug-ins
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false"
        case_sensitive: "false"
        description: "Plug-ins are disabled in the Safari web browser."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool true"
    },
    {
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WebKitPluginsEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitPluginsEnabled -bool false"
        case_sensitive: "false"
        description: "Plug-ins are disabled in the Safari web browser (Legacy version)."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitPluginsEnabled -bool true"
    },
    {
        //Safari->Preferences->Security->Internet plug-ins->Plug-in Settings...->When visiting other websites
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari PlugInFirstVisitPolicy"
        expected_stdout: "PlugInPolicyBlock"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari PlugInFirstVisitPolicy PlugInPolicyBlock"
        case_sensitive: "false"
        description: "Plug-ins are blocked by default in the Safari web browser unless a site is explicitly added to a list of allowed sites."
    },
    {
        //Safari->Preferences->Security->Internet plug-ins->Plug-in Settings...->Java->When visiting other websites->Block
        type: "exact match"
        confidence: "required"
        //Note: dictionary values for PList fields are easier to handle with `PlistBuddy` instead of `defaults`.
        command:
            /usr/libexec/PlistBuddy -c "Print :ManagedPlugInPolicies:com.oracle.java.JavaAppletPlugin:PlugInFirstVisitPolicy" ~/Library/Preferences/com.apple.Safari.plist
        expected_stdout: "PlugInPolicyBlock"
        fix:
            /usr/libexec/PlistBuddy -c "Add :ManagedPlugInPolicies dict" ~/Library/Preferences/com.apple.Safari.plist ; /usr/libexec/PlistBuddy -c "Add :ManagedPlugInPolicies:com.oracle.java.JavaAppletPlugin dict" ~/Library/Preferences/com.apple.Safari.plist ; /usr/libexec/PlistBuddy -c "Add :ManagedPlugInPolicies:com.oracle.java.JavaAppletPlugin:PlugInFirstVisitPolicy string PlugInPolicyBlock" ~/Library/Preferences/com.apple.Safari.plist; /usr/libexec/PlistBuddy -c "Set :ManagedPlugInPolicies:com.oracle.java.JavaAppletPlugin:PlugInFirstVisitPolicy PlugInPolicyBlock" ~/Library/Preferences/com.apple.Safari.plist
        case_sensitive: "false"
        description: "The Java plug-in for Safari web browser is blocked unless a site is explicitly added to a list of allowed sites."
    },
    {
        //Safari->Preferences->Security->Internet plug-ins->Plug-in Settings...->Java
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false"
        case_sensitive: "false"
        description: "The Java plug-in is disabled in the Safari web browser."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool true"
    },
    {
        //This appears to be an old method circa 2009 for disabling Java. See: http://alblue.bandlem.com/2009/05/disabling-java-in-webkit.html
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WebKitJavaEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitJavaEnabled -bool false"
        case_sensitive: "false"
        description: "The Java plug-in is disabled in the Safari web browser (Legacy version)."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitJavaEnabled -bool true"
    },
    {
        //Safari->Develop->Treat SHA-1 Certificates as Insecure
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari TreatSHA1CertificatesAsInsecure"
        expected_stdout: "1"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari TreatSHA1CertificatesAsInsecure -bool true"
        case_sensitive: "false"
        description: "The Safari web browser is configured to treat SHA-1 certficiates as insecure."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari TreatSHA1CertificatesAsInsecure -bool false"
    },
    {
        //Safari->Preferences->Search->Preload Top Hit in the background
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari PreloadTopHit"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari PreloadTopHit -bool false"
        case_sensitive: "false"
        description: "The Safari web browser will not pre-load webpages that rank highly as search matches."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari PreloadTopHit -bool true"
    },
    {
        //Safari->Preferences->Search->Search engine->Include search engine suggestions
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari SuppressSearchSuggestions"
        expected_stdout: "1"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SuppressSearchSuggestions -bool true"
        case_sensitive: "false"
        description: "The Safari web browser will not include search engine suggestions for text typed in the location bar."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SuppressSearchSuggestions -bool false"
    },
    {
        //Safari->Preferences->Search->Smart Search Field->Include Safari Suggestions
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari UniversalSearchEnabled"
        expected_stdout: "0"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari UniversalSearchEnabled -bool false"
        case_sensitive: "false"
        description: "The Safari web browser's search suggestions are disabled."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari UniversalSearchEnabled -bool true"
    },
    {
        //Safari->Preferences->Privacy->Website tracking->Ask websites not to track me
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader"
        expected_stdout: "1"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool true"
        case_sensitive: "false"
        description: "The Safari web browser uses the Do-Not-Track HTTP header."
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool false"
    },
    {
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WebKitOmitPDFSupport"
        expected_stdout: "1"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitOmitPDFSupport -bool true"
        case_sensitive: "false"
        description: "PDF viewing is disabled in the Safari web browser."
        undo: ""
    },
    {
        //Safari->Preferences->Advanced->Smart Search Field->Show full website address
        //This might help prevent phishing attacks
        type: "exact match"
        confidence: "required"
        command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField"
        expected_stdout: "1"
        fix: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool true"
        case_sensitive: "false"
        description: "Full website addresses are disabled in the location bar of the Safari web browser."
        undo: defaults -currentHost write ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool false"
    },
    /* ----END SAFARI BROWSER SETTINGS---- */

    /* ---BEGIN APPLE MAIL SETTINGS--- */
    {
        //Check if the Mail app is closed -- otherwise, it may override changes this app makes.
        type: "exact match"
        confidence: "required"
        command: "ps ax | grep -c '/Applications/Mail.app/Contents/MacOS/Mail'"
        expected_stdout: "2" //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
        fix:
            killall "Mail" ; sleep 1
        case_sensitive: "false"
        description: "The Mail application is currently closed."
        reference: "https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html"
    },
    {
        //Mail->Preferences->Viewing->Load remote content in messages
        type: "exact match"
        confidence: "recommended"
        //Either Apple Mail is not in use or remote content is disabled. I use "ls" here to resolve the "~" symbol to the fully qualified file path that "test" requires.
        command:
            REMOTELOAD=$(defaults read ~/Library/Preferences/com.apple.mail-shared DisableURLLoading | grep 1) ; if [ ! -e $(ls ~/Library/Preferences/com.apple.mail-shared.plist) ] || [ -n "$REMOTELOAD" ]; then echo 1; else echo 0; fi
        expected_stdout: "1"
        fix: "defaults write ~/Library/Preferences/com.apple.mail-shared DisableURLLoading -bool true"
        case_sensitive: "false"
        description: "Apple Mail does not automatically load remote content in e-mails."
        undo: "defaults write ~/Library/Preferences/com.apple.mail-shared DisableURLLoading -bool false"
    },
    {
        //Mail->Preferences->Junk Mail->Enable junk mail filtering AND When junk mail arrives: Move it to the Junk mailbox
        type: "exact match"
        confidence: "recommended"
        command: "defaults -currentHost read ~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail JunkMailBehavior"
        expected_stdout: "2"
        fix: "defaults -currentHost write ~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail JunkMailBehavior -int 2"
        case_sensitive: "false"
        description: "Mail identified by Apple Mail as junk is sent to the Junk mailbox."
    },
    {
        //Mail->Preferences->GPGMail->Composing->Encrypt new messages by default
        type: "exact match"
        confidence: "recommended"
        command:
            AUTOENCRYPT=$(defaults read ~/Library/Preferences/org.gpgtools.gpgmail EncryptNewEmailsByDefault | grep 1) ; if [ ! -e $(ls ~/Library/Preferences/org.gpgtools.gpgmail.plist) ] || [ -n "$AUTOENCRYPT" ]; then echo 1; else echo 0; fi
        expected_stdout: "1"
        fix: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist EncryptNewEmailsByDefault -bool true"
        case_sensitive: "false"
        description: "New e-mails composed in Apple Mail are encrypted by GPGMail if the receiver's PGP is present in the keychain."
        undo: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist EncryptNewEmailsByDefault -bool false"
    },
    {
        //Mail->Preferences->GPGMail->Composing->Encrypt drafts
        type: "exact match"
        confidence: "required"
        command:
            AUTOENCRYPTDRAFTS=$(defaults read ~/Library/Preferences/org.gpgtools.gpgmail OptionallyEncryptDrafts | grep 1) ; if [ ! -e $(ls ~/Library/Preferences/org.gpgtools.gpgmail.plist) ] || [ -n "$AUTOENCRYPTDRAFTS" ]; then echo 1; else echo 0; fi
        expected_stdout: "1"
        fix: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist OptionallyEncryptDrafts -bool true"
        case_sensitive: "false"
        description: "New e-mails composed in Apple Mail and saved as drafts are encrypted by GPGMail."
        undo: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist OptionallyEncryptDrafts -bool false"
    },
    {
        //Mail->Preferences->GPGMail->Composing->Sign new messages by default
        type: "exact match"
        confidence: "required"
        command:
            AUTOSIGN=$(defaults read ~/Library/Preferences/org.gpgtools.gpgmail SignNewEmailsByDefault | grep 1) ; if [ ! -e $(ls ~/Library/Preferences/org.gpgtools.gpgmail.plist) ] || [ -n "$AUTOSIGN" ]; then echo 1; else echo 0; fi
        expected_stdout: "1"
        fix: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist SignNewEmailsByDefault -bool true"
        case_sensitive: "false"
        description: "New e-mails composed in Apple Mail are signed by GPGMail."
        undo: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist SignNewEmailsByDefault -bool false"
    },
    {
        //Mail->Preferences->GPGMail->Updates->Automatically check for updates
        type: "exact match"
        confidence: "required"
        command:
            AUTOCHECK=$(defaults read ~/Library/Preferences/org.gpgtools.gpgmail SUEnableAutomaticChecks | grep 1) ; if [ ! -e $(ls ~/Library/Preferences/org.gpgtools.gpgmail.plist) ] || [ -n "$AUTOCHECK" ]; then echo 1; else echo 0; fi
        expected_stdout: "1"
        fix: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist SUEnableAutomaticChecks -bool true"
        case_sensitive: "false"
        description: "Apple Mail with automatically check for updates to GPGMail."
        undo: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist SUEnableAutomaticChecks -bool false"
    },
    /* ----END APPLE MAIL SETTINGS---- */

    /* ---BEGIN GOOGLE CHROME SETTINGS--- */
    {
        //Check if the Chrome app is closed -- otherwise, it may override changes this app makes.
        type: "exact match"
        confidence: "required"
        command: "ps ax | grep -c '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'"
        expected_stdout: "2" //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
        fix:
            killall "Google Chrome" ; sleep 3
        case_sensitive: "false"
        description: "The Google Chrome browser is currently closed."
    },
    {
        //Google Chrome->Show Advanced Settings->Privacy->Send a "Do Not Track" request with your browsing traffic
        type: "regex match"
        confidence: "recommended"
        //This check should short-circuit and match the regex if Chrome is not installed
        command:
            if [ ! -e "/Applications/Google Chrome.app" ]; then echo "True"; else find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' enable_do_not_track ; fi
        expected_regex: "(True\n?)+"
        fix:
            find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' enable_do_not_track -bool true
        case_sensitive: "false"
        description: "All Google Chrome web browser profiles use the Do-Not-Track HTTP header."
    },

    /* ----END GOOGLE CHROME SETTINGS---- */

    /* useful for debugging `sudo_command`
    {
        type: "regex match"
        confidence: "required"
        command: "ls /private/var/root"
        sudo_command: "sudo ls /private/var/root"
        expected_regex: ".*Library.*"
        fix: "#"
        case_sensitive: true
        description: "Can read /private/var/root"
    }
    */
]
